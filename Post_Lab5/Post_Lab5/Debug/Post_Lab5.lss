
Post_Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000009de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000096a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000009de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df7  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000793  00000000  00000000  000022df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051e  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e1  00000000  00000000  00003232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003a13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  88:	0c 94 b3 04 	jmp	0x966	; 0x966 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
#include "ADC.h"
#include <avr/io.h>

void ADC_init(void)
{
	ADMUX |= (1<<REFS0);	//Seleccionar el voltaje de referencia
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<ADLAR);	// Se define que se trabajara con 10 bits
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24
	
	// Configuración Prescaler de 128 --> 16M/128 = 125KHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);	// Se enceinde el ADC y se activa su interruptor de igual forma
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//Entradas para los potenciometros
	DIDR0 |= (1 << ADC0D);		// Desabilitar la entrada digital PC0
  b6:	ee e7       	ldi	r30, 0x7E	; 126
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC1D);		// Desabilitar la entrada digital PC1
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC4D);		// Desabilitar la entrada digital PC4
  c6:	80 81       	ld	r24, Z
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <ADC_read>:
}
uint16_t ADC_read(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;			//Seleccionar el canal del ADC
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	89 2b       	or	r24, r25
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);					// Se inicia la conversión de lo valores
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));				//Se espera hasta que la conversión se haya completado 
  e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e8:	86 fd       	sbrc	r24, 6
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <ADC_read+0x16>
	return(ADC);							//Regresa el valor de ADC
  ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f4:	08 95       	ret

000000f6 <main>:

float ADC_V3 = 0;			//Variable que lee el valor del PIN PC4

int main(void)
{
	cli();
  f6:	f8 94       	cli
	DDRD = 0xFF;			//Configuración del puerto D
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8a b9       	out	0x0a, r24	; 10
	
	TCCR2A = 0;
  fc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 100:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//Se llaman a las librerias establecidas en ADC y PWM1
	ADC_init();
 104:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PWM0_init();
 108:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <PWM0_init>
	PWM1_initial();
 10c:	0e 94 1d 01 	call	0x23a	; 0x23a <PWM1_initial>
	PWM2_initial(NO_INVERTIDO,1024);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	74 e0       	ldi	r23, 0x04	; 4
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 cb 01 	call	0x396	; 0x396 <PWM2_initial>

	sei();
 11a:	78 94       	sei

	while (1)
	{
		//Configuración Servomotor#1 - PB1
		ADC_V1 = ADC_read(0);		//Lee el canal 0 del puerto C (PC0)
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 67 00 	call	0xce	; 0xce <ADC_read>
 122:	bc 01       	movw	r22, r24
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 90 03 	call	0x720	; 0x720 <__floatunsisf>
 12c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <ADC_V1>
 130:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <ADC_V1+0x1>
 134:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ADC_V1+0x2>
 138:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <ADC_V1+0x3>
		servo_moA1(ADC_V1);			//Realiza la señal del canal A
 13c:	0e 94 9b 01 	call	0x336	; 0x336 <servo_moA1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	8f e3       	ldi	r24, 0x3F	; 63
 142:	9c e9       	ldi	r25, 0x9C	; 156
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x4e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x54>
 14a:	00 00       	nop
		_delay_ms(10);				//Implementar un delay de 10ms para que el giro del servo sea más fluido
		
		ADC_V2 = ADC_read(1);		//Lee el canal 2 del puerto C (PC2)
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 67 00 	call	0xce	; 0xce <ADC_read>
 152:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADC_V2>
		servo_mo2(ADC_V2);			//Realiza la señal del canal A
 156:	0e 94 4c 02 	call	0x498	; 0x498 <servo_mo2>
 15a:	8f e3       	ldi	r24, 0x3F	; 63
 15c:	9c e9       	ldi	r25, 0x9C	; 156
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x68>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x6e>
 164:	00 00       	nop
		_delay_ms(10);				//Implementar un delay de 10ms
		
		ADC_V3 = ADC_read(4);					//Lee el canal 4 del puerto C (PC4)
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	0e 94 67 00 	call	0xce	; 0xce <ADC_read>
 16c:	bc 01       	movw	r22, r24
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 90 03 	call	0x720	; 0x720 <__floatunsisf>
		ADC_V3 = (ADC_V3 * 100)/1023;			//ADC de 10 Bits -> Se realiza una conversión para trabajar al 100%
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	48 ec       	ldi	r20, 0xC8	; 200
 17c:	52 e4       	ldi	r21, 0x42	; 66
 17e:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 ec       	ldi	r19, 0xC0	; 192
 186:	4f e7       	ldi	r20, 0x7F	; 127
 188:	54 e4       	ldi	r21, 0x44	; 68
 18a:	0e 94 ef 02 	call	0x5de	; 0x5de <__divsf3>
 18e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 196:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		PWM0_dca((uint8_t)ADC_V3, NO_INVERTIDO);
 19e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fixunssfsi>
 1a2:	86 2f       	mov	r24, r22
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	0e 94 04 01 	call	0x208	; 0x208 <PWM0_dca>
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	9c e9       	ldi	r25, 0x9C	; 156
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xb8>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xbe>
 1b4:	00 00       	nop
 1b6:	b2 cf       	rjmp	.-156    	; 0x11c <main+0x26>

000001b8 <__vector_21>:
		_delay_ms(10);	

	}
}

ISR(ADC_vect){
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	ADCSRA |= (1 << ADIF);	//Limpiar la bandera al encender el ADC
 1c8:	ea e7       	ldi	r30, 0x7A	; 122
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 61       	ori	r24, 0x10	; 16
 1d0:	80 83       	st	Z, r24
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <PWM0_init>:
#include "PWM0.h"

void PWM0_init(void)
{
	// Modo Fast PWM
	TCCR0B &= ~(1<<WGM02);
 1e2:	85 b5       	in	r24, 0x25	; 37
 1e4:	87 7f       	andi	r24, 0xF7	; 247
 1e6:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<WGM01);
 1e8:	84 b5       	in	r24, 0x24	; 36
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
 1ee:	84 b5       	in	r24, 0x24	; 36
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	84 bd       	out	0x24, r24	; 36
	
	// Prescalador 64
	TCCR0B &= ~(1<<CS02);
 1f4:	85 b5       	in	r24, 0x25	; 37
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01);
 1fa:	85 b5       	in	r24, 0x25	; 37
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
 200:	85 b5       	in	r24, 0x25	; 37
 202:	81 60       	ori	r24, 0x01	; 1
 204:	85 bd       	out	0x25, r24	; 37
 206:	08 95       	ret

00000208 <PWM0_dca>:
}

void PWM0_dca(uint8_t dc, uint8_t modo)
{
	if(modo == 1)				//La salida del PWM es NO INVERTIDA
 208:	61 30       	cpi	r22, 0x01	; 1
 20a:	39 f4       	brne	.+14     	; 0x21a <PWM0_dca+0x12>
	{
		TCCR0A |= (1<<COM0A1);
 20c:	94 b5       	in	r25, 0x24	; 36
 20e:	90 68       	ori	r25, 0x80	; 128
 210:	94 bd       	out	0x24, r25	; 36
		TCCR0A &= ~(1<<COM0A0);
 212:	94 b5       	in	r25, 0x24	; 36
 214:	9f 7b       	andi	r25, 0xBF	; 191
 216:	94 bd       	out	0x24, r25	; 36
 218:	06 c0       	rjmp	.+12     	; 0x226 <PWM0_dca+0x1e>
	}
	else                        //Es INVERTIDA
	{
		TCCR0A |= (1<<COM0A1);
 21a:	94 b5       	in	r25, 0x24	; 36
 21c:	90 68       	ori	r25, 0x80	; 128
 21e:	94 bd       	out	0x24, r25	; 36
		TCCR0A |= (1<<COM0A0);
 220:	94 b5       	in	r25, 0x24	; 36
 222:	90 64       	ori	r25, 0x40	; 64
 224:	94 bd       	out	0x24, r25	; 36
		
	}
	OCR0A = (dc * 255) / 100;				//Configuración del cilo del trabajo
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	82 9f       	mul	r24, r18
 22a:	c0 01       	movw	r24, r0
 22c:	11 24       	eor	r1, r1
 22e:	64 e6       	ldi	r22, 0x64	; 100
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	0e 94 8b 04 	call	0x916	; 0x916 <__divmodhi4>
 236:	67 bd       	out	0x27, r22	; 39
 238:	08 95       	ret

0000023a <PWM1_initial>:
#include "PWM1.h"
#include <avr/io.h>

void PWM1_initial(void){
	//Configuración valores de entrada
	DDRB |= (1<<DDB1)|(1<<DDB2);
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	86 60       	ori	r24, 0x06	; 6
 23e:	84 b9       	out	0x04, r24	; 4
	
	TCNT1 = 0;				//Se configura el RESET
 240:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 244:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 39999;			//Se configura el TOP
 248:	8f e3       	ldi	r24, 0x3F	; 63
 24a:	9c e9       	ldi	r25, 0x9C	; 156
 24c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 250:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ;		//Salida en nivel bajo --> Se compara la coincidencia
 254:	e0 e8       	ldi	r30, 0x80	; 128
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 ea       	ldi	r24, 0xA0	; 160
 25a:	80 83       	st	Z, r24
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Configuración PWM MODO:Fast TOP ICR1
 25c:	80 81       	ld	r24, Z
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Modo Fast PWM TOP ---> ICR1
 262:	e1 e8       	ldi	r30, 0x81	; 129
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	80 83       	st	Z, r24
	
	// Configuración del Prescaler: 8
	TCCR1B |= (1 << CS11);
 26a:	80 81       	ld	r24, Z
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 83       	st	Z, r24
 270:	08 95       	ret

00000272 <map>:

void servo_moB1(float adc_Value){					//Configuración del movimiento del servo canal B
	OCR1B = map(adc_Value, 0, 1024, 1000, 4800);
}

uint16_t map(float x, float in_min, float in_max, float out_min, float out_max){
 272:	4f 92       	push	r4
 274:	5f 92       	push	r5
 276:	6f 92       	push	r6
 278:	7f 92       	push	r7
 27a:	af 92       	push	r10
 27c:	bf 92       	push	r11
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	28 97       	sbiw	r28, 0x08	; 8
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	29 01       	movw	r4, r18
 2a0:	3a 01       	movw	r6, r20
 2a2:	ed 82       	std	Y+5, r14	; 0x05
 2a4:	fe 82       	std	Y+6, r15	; 0x06
 2a6:	0f 83       	std	Y+7, r16	; 0x07
 2a8:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 2aa:	0e 94 82 02 	call	0x504	; 0x504 <__subsf3>
 2ae:	69 83       	std	Y+1, r22	; 0x01
 2b0:	7a 83       	std	Y+2, r23	; 0x02
 2b2:	8b 83       	std	Y+3, r24	; 0x03
 2b4:	9c 83       	std	Y+4, r25	; 0x04
 2b6:	a6 01       	movw	r20, r12
 2b8:	95 01       	movw	r18, r10
 2ba:	69 8d       	ldd	r22, Y+25	; 0x19
 2bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
 2be:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2c2:	0e 94 82 02 	call	0x504	; 0x504 <__subsf3>
 2c6:	9b 01       	movw	r18, r22
 2c8:	ac 01       	movw	r20, r24
 2ca:	69 81       	ldd	r22, Y+1	; 0x01
 2cc:	7a 81       	ldd	r23, Y+2	; 0x02
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 2d6:	69 83       	std	Y+1, r22	; 0x01
 2d8:	7a 83       	std	Y+2, r23	; 0x02
 2da:	8b 83       	std	Y+3, r24	; 0x03
 2dc:	9c 83       	std	Y+4, r25	; 0x04
 2de:	a3 01       	movw	r20, r6
 2e0:	92 01       	movw	r18, r4
 2e2:	c8 01       	movw	r24, r16
 2e4:	b7 01       	movw	r22, r14
 2e6:	0e 94 82 02 	call	0x504	; 0x504 <__subsf3>
 2ea:	9b 01       	movw	r18, r22
 2ec:	ac 01       	movw	r20, r24
 2ee:	69 81       	ldd	r22, Y+1	; 0x01
 2f0:	7a 81       	ldd	r23, Y+2	; 0x02
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	9c 81       	ldd	r25, Y+4	; 0x04
 2f6:	0e 94 ef 02 	call	0x5de	; 0x5de <__divsf3>
 2fa:	9b 01       	movw	r18, r22
 2fc:	ac 01       	movw	r20, r24
 2fe:	c6 01       	movw	r24, r12
 300:	b5 01       	movw	r22, r10
 302:	0e 94 83 02 	call	0x506	; 0x506 <__addsf3>
 306:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fixunssfsi>
 30a:	cb 01       	movw	r24, r22
 30c:	28 96       	adiw	r28, 0x08	; 8
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	0f be       	out	0x3f, r0	; 63
 316:	cd bf       	out	0x3d, r28	; 61
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	df 90       	pop	r13
 326:	cf 90       	pop	r12
 328:	bf 90       	pop	r11
 32a:	af 90       	pop	r10
 32c:	7f 90       	pop	r7
 32e:	6f 90       	pop	r6
 330:	5f 90       	pop	r5
 332:	4f 90       	pop	r4
 334:	08 95       	ret

00000336 <servo_moA1>:
	
	// Configuración del Prescaler: 8
	TCCR1B |= (1 << CS11);
}

void servo_moA1(float adc_Value){					//Configuración del movimiento del servo canal A
 336:	af 92       	push	r10
 338:	bf 92       	push	r11
 33a:	cf 92       	push	r12
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
	//// Mapear el valor del potenciómetro al ciclo de trabajo del PWM
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
 346:	25 e4       	ldi	r18, 0x45	; 69
 348:	2f 93       	push	r18
 34a:	26 e9       	ldi	r18, 0x96	; 150
 34c:	2f 93       	push	r18
 34e:	1f 92       	push	r1
 350:	1f 92       	push	r1
 352:	0f 2e       	mov	r0, r31
 354:	a1 2c       	mov	r10, r1
 356:	b1 2c       	mov	r11, r1
 358:	fa e7       	ldi	r31, 0x7A	; 122
 35a:	cf 2e       	mov	r12, r31
 35c:	f4 e4       	ldi	r31, 0x44	; 68
 35e:	df 2e       	mov	r13, r31
 360:	f0 2d       	mov	r31, r0
 362:	e1 2c       	mov	r14, r1
 364:	f1 2c       	mov	r15, r1
 366:	00 e8       	ldi	r16, 0x80	; 128
 368:	14 e4       	ldi	r17, 0x44	; 68
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	a9 01       	movw	r20, r18
 370:	0e 94 39 01 	call	0x272	; 0x272 <map>
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 380:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	bf 90       	pop	r11
 392:	af 90       	pop	r10
 394:	08 95       	ret

00000396 <PWM2_initial>:

//->Configuración PWM Timer2

void PWM2_initial(uint8_t inverted, uint16_t prescaler){			//Configuración del Canal A
	//Declarar saldias
	DDRB |= (1 << DDB3); //Se define el pin PB3 como salida
 396:	94 b1       	in	r25, 0x04	; 4
 398:	98 60       	ori	r25, 0x08	; 8
 39a:	94 b9       	out	0x04, r25	; 4
	
	//Configuración modo Fast
	TCCR2A |= (1 << WGM21)|(1 << WGM20); 
 39c:	e0 eb       	ldi	r30, 0xB0	; 176
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	90 81       	ld	r25, Z
 3a2:	93 60       	ori	r25, 0x03	; 3
 3a4:	90 83       	st	Z, r25
	
	//Configuración de PWM INVERTIDO
	if (inverted) {
 3a6:	88 23       	and	r24, r24
 3a8:	21 f0       	breq	.+8      	; 0x3b2 <PWM2_initial+0x1c>
		TCCR2A |= (1 << COM2A1)|(1 << COM2A0);
 3aa:	80 81       	ld	r24, Z
 3ac:	80 6c       	ori	r24, 0xC0	; 192
 3ae:	80 83       	st	Z, r24
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <PWM2_initial+0x26>
		} else	 {	//PWM NO INVERTIDO
		TCCR2A |= (1 << COM2A1);
 3b2:	e0 eb       	ldi	r30, 0xB0	; 176
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	80 83       	st	Z, r24
	}

	//Configuración Prescaler de 1024
	if (prescaler == 1024) {
 3bc:	61 15       	cp	r22, r1
 3be:	74 40       	sbci	r23, 0x04	; 4
 3c0:	31 f4       	brne	.+12     	; 0x3ce <PWM2_initial+0x38>
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
 3c2:	e1 eb       	ldi	r30, 0xB1	; 177
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	87 60       	ori	r24, 0x07	; 7
 3ca:	80 83       	st	Z, r24
 3cc:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
 3ce:	e1 eb       	ldi	r30, 0xB1	; 177
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <map1>:
void servo_mo2(uint8_t duty){		//Mapeo canal A
	OCR2A = map1(duty,0,200,6,36);
}

//Declarar una función de mapeo para convertir el valor del potenciómetro
float map1(float x, float in_min, float in_max, float out_min, float out_max){
 3da:	4f 92       	push	r4
 3dc:	5f 92       	push	r5
 3de:	6f 92       	push	r6
 3e0:	7f 92       	push	r7
 3e2:	af 92       	push	r10
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	28 97       	sbiw	r28, 0x08	; 8
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	29 01       	movw	r4, r18
 408:	3a 01       	movw	r6, r20
 40a:	ed 82       	std	Y+5, r14	; 0x05
 40c:	fe 82       	std	Y+6, r15	; 0x06
 40e:	0f 83       	std	Y+7, r16	; 0x07
 410:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 412:	0e 94 82 02 	call	0x504	; 0x504 <__subsf3>
 416:	69 83       	std	Y+1, r22	; 0x01
 418:	7a 83       	std	Y+2, r23	; 0x02
 41a:	8b 83       	std	Y+3, r24	; 0x03
 41c:	9c 83       	std	Y+4, r25	; 0x04
 41e:	a6 01       	movw	r20, r12
 420:	95 01       	movw	r18, r10
 422:	69 8d       	ldd	r22, Y+25	; 0x19
 424:	7a 8d       	ldd	r23, Y+26	; 0x1a
 426:	8b 8d       	ldd	r24, Y+27	; 0x1b
 428:	9c 8d       	ldd	r25, Y+28	; 0x1c
 42a:	0e 94 82 02 	call	0x504	; 0x504 <__subsf3>
 42e:	9b 01       	movw	r18, r22
 430:	ac 01       	movw	r20, r24
 432:	69 81       	ldd	r22, Y+1	; 0x01
 434:	7a 81       	ldd	r23, Y+2	; 0x02
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	9c 81       	ldd	r25, Y+4	; 0x04
 43a:	0e 94 1e 04 	call	0x83c	; 0x83c <__mulsf3>
 43e:	69 83       	std	Y+1, r22	; 0x01
 440:	7a 83       	std	Y+2, r23	; 0x02
 442:	8b 83       	std	Y+3, r24	; 0x03
 444:	9c 83       	std	Y+4, r25	; 0x04
 446:	a3 01       	movw	r20, r6
 448:	92 01       	movw	r18, r4
 44a:	c8 01       	movw	r24, r16
 44c:	b7 01       	movw	r22, r14
 44e:	0e 94 82 02 	call	0x504	; 0x504 <__subsf3>
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	69 81       	ldd	r22, Y+1	; 0x01
 458:	7a 81       	ldd	r23, Y+2	; 0x02
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	9c 81       	ldd	r25, Y+4	; 0x04
 45e:	0e 94 ef 02 	call	0x5de	; 0x5de <__divsf3>
 462:	9b 01       	movw	r18, r22
 464:	ac 01       	movw	r20, r24
 466:	c6 01       	movw	r24, r12
 468:	b5 01       	movw	r22, r10
 46a:	0e 94 83 02 	call	0x506	; 0x506 <__addsf3>
 46e:	28 96       	adiw	r28, 0x08	; 8
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	ff 90       	pop	r15
 484:	ef 90       	pop	r14
 486:	df 90       	pop	r13
 488:	cf 90       	pop	r12
 48a:	bf 90       	pop	r11
 48c:	af 90       	pop	r10
 48e:	7f 90       	pop	r7
 490:	6f 90       	pop	r6
 492:	5f 90       	pop	r5
 494:	4f 90       	pop	r4
 496:	08 95       	ret

00000498 <servo_mo2>:
		} else {
		TCCR2B |= (1 << CS20);
	}
}

void servo_mo2(uint8_t duty){		//Mapeo canal A
 498:	af 92       	push	r10
 49a:	bf 92       	push	r11
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
	OCR2A = map1(duty,0,200,6,36);
 4a8:	68 2f       	mov	r22, r24
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 90 03 	call	0x720	; 0x720 <__floatunsisf>
 4b4:	22 e4       	ldi	r18, 0x42	; 66
 4b6:	2f 93       	push	r18
 4b8:	20 e1       	ldi	r18, 0x10	; 16
 4ba:	2f 93       	push	r18
 4bc:	1f 92       	push	r1
 4be:	1f 92       	push	r1
 4c0:	0f 2e       	mov	r0, r31
 4c2:	a1 2c       	mov	r10, r1
 4c4:	b1 2c       	mov	r11, r1
 4c6:	f0 ec       	ldi	r31, 0xC0	; 192
 4c8:	cf 2e       	mov	r12, r31
 4ca:	f0 e4       	ldi	r31, 0x40	; 64
 4cc:	df 2e       	mov	r13, r31
 4ce:	f0 2d       	mov	r31, r0
 4d0:	e1 2c       	mov	r14, r1
 4d2:	f1 2c       	mov	r15, r1
 4d4:	08 e4       	ldi	r16, 0x48	; 72
 4d6:	13 e4       	ldi	r17, 0x43	; 67
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	a9 01       	movw	r20, r18
 4de:	0e 94 ed 01 	call	0x3da	; 0x3da <map1>
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fixunssfsi>
 4ee:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	bf 90       	pop	r11
 500:	af 90       	pop	r10
 502:	08 95       	ret

00000504 <__subsf3>:
 504:	50 58       	subi	r21, 0x80	; 128

00000506 <__addsf3>:
 506:	bb 27       	eor	r27, r27
 508:	aa 27       	eor	r26, r26
 50a:	0e 94 9a 02 	call	0x534	; 0x534 <__addsf3x>
 50e:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>
 512:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 516:	38 f0       	brcs	.+14     	; 0x526 <__addsf3+0x20>
 518:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 51c:	20 f0       	brcs	.+8      	; 0x526 <__addsf3+0x20>
 51e:	39 f4       	brne	.+14     	; 0x52e <__addsf3+0x28>
 520:	9f 3f       	cpi	r25, 0xFF	; 255
 522:	19 f4       	brne	.+6      	; 0x52a <__addsf3+0x24>
 524:	26 f4       	brtc	.+8      	; 0x52e <__addsf3+0x28>
 526:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_nan>
 52a:	0e f4       	brtc	.+2      	; 0x52e <__addsf3+0x28>
 52c:	e0 95       	com	r30
 52e:	e7 fb       	bst	r30, 7
 530:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>

00000534 <__addsf3x>:
 534:	e9 2f       	mov	r30, r25
 536:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 53a:	58 f3       	brcs	.-42     	; 0x512 <__addsf3+0xc>
 53c:	ba 17       	cp	r27, r26
 53e:	62 07       	cpc	r22, r18
 540:	73 07       	cpc	r23, r19
 542:	84 07       	cpc	r24, r20
 544:	95 07       	cpc	r25, r21
 546:	20 f0       	brcs	.+8      	; 0x550 <__addsf3x+0x1c>
 548:	79 f4       	brne	.+30     	; 0x568 <__addsf3x+0x34>
 54a:	a6 f5       	brtc	.+104    	; 0x5b4 <__addsf3x+0x80>
 54c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_zero>
 550:	0e f4       	brtc	.+2      	; 0x554 <__addsf3x+0x20>
 552:	e0 95       	com	r30
 554:	0b 2e       	mov	r0, r27
 556:	ba 2f       	mov	r27, r26
 558:	a0 2d       	mov	r26, r0
 55a:	0b 01       	movw	r0, r22
 55c:	b9 01       	movw	r22, r18
 55e:	90 01       	movw	r18, r0
 560:	0c 01       	movw	r0, r24
 562:	ca 01       	movw	r24, r20
 564:	a0 01       	movw	r20, r0
 566:	11 24       	eor	r1, r1
 568:	ff 27       	eor	r31, r31
 56a:	59 1b       	sub	r21, r25
 56c:	99 f0       	breq	.+38     	; 0x594 <__addsf3x+0x60>
 56e:	59 3f       	cpi	r21, 0xF9	; 249
 570:	50 f4       	brcc	.+20     	; 0x586 <__addsf3x+0x52>
 572:	50 3e       	cpi	r21, 0xE0	; 224
 574:	68 f1       	brcs	.+90     	; 0x5d0 <__addsf3x+0x9c>
 576:	1a 16       	cp	r1, r26
 578:	f0 40       	sbci	r31, 0x00	; 0
 57a:	a2 2f       	mov	r26, r18
 57c:	23 2f       	mov	r18, r19
 57e:	34 2f       	mov	r19, r20
 580:	44 27       	eor	r20, r20
 582:	58 5f       	subi	r21, 0xF8	; 248
 584:	f3 cf       	rjmp	.-26     	; 0x56c <__addsf3x+0x38>
 586:	46 95       	lsr	r20
 588:	37 95       	ror	r19
 58a:	27 95       	ror	r18
 58c:	a7 95       	ror	r26
 58e:	f0 40       	sbci	r31, 0x00	; 0
 590:	53 95       	inc	r21
 592:	c9 f7       	brne	.-14     	; 0x586 <__addsf3x+0x52>
 594:	7e f4       	brtc	.+30     	; 0x5b4 <__addsf3x+0x80>
 596:	1f 16       	cp	r1, r31
 598:	ba 0b       	sbc	r27, r26
 59a:	62 0b       	sbc	r22, r18
 59c:	73 0b       	sbc	r23, r19
 59e:	84 0b       	sbc	r24, r20
 5a0:	ba f0       	brmi	.+46     	; 0x5d0 <__addsf3x+0x9c>
 5a2:	91 50       	subi	r25, 0x01	; 1
 5a4:	a1 f0       	breq	.+40     	; 0x5ce <__addsf3x+0x9a>
 5a6:	ff 0f       	add	r31, r31
 5a8:	bb 1f       	adc	r27, r27
 5aa:	66 1f       	adc	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	c2 f7       	brpl	.-16     	; 0x5a2 <__addsf3x+0x6e>
 5b2:	0e c0       	rjmp	.+28     	; 0x5d0 <__addsf3x+0x9c>
 5b4:	ba 0f       	add	r27, r26
 5b6:	62 1f       	adc	r22, r18
 5b8:	73 1f       	adc	r23, r19
 5ba:	84 1f       	adc	r24, r20
 5bc:	48 f4       	brcc	.+18     	; 0x5d0 <__addsf3x+0x9c>
 5be:	87 95       	ror	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b7 95       	ror	r27
 5c6:	f7 95       	ror	r31
 5c8:	9e 3f       	cpi	r25, 0xFE	; 254
 5ca:	08 f0       	brcs	.+2      	; 0x5ce <__addsf3x+0x9a>
 5cc:	b0 cf       	rjmp	.-160    	; 0x52e <__addsf3+0x28>
 5ce:	93 95       	inc	r25
 5d0:	88 0f       	add	r24, r24
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <__addsf3x+0xa2>
 5d4:	99 27       	eor	r25, r25
 5d6:	ee 0f       	add	r30, r30
 5d8:	97 95       	ror	r25
 5da:	87 95       	ror	r24
 5dc:	08 95       	ret

000005de <__divsf3>:
 5de:	0e 94 03 03 	call	0x606	; 0x606 <__divsf3x>
 5e2:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>
 5e6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 5ea:	58 f0       	brcs	.+22     	; 0x602 <__divsf3+0x24>
 5ec:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 5f0:	40 f0       	brcs	.+16     	; 0x602 <__divsf3+0x24>
 5f2:	29 f4       	brne	.+10     	; 0x5fe <__divsf3+0x20>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	29 f0       	breq	.+10     	; 0x602 <__divsf3+0x24>
 5f8:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>
 5fc:	51 11       	cpse	r21, r1
 5fe:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 602:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_nan>

00000606 <__divsf3x>:
 606:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 60a:	68 f3       	brcs	.-38     	; 0x5e6 <__divsf3+0x8>

0000060c <__divsf3_pse>:
 60c:	99 23       	and	r25, r25
 60e:	b1 f3       	breq	.-20     	; 0x5fc <__divsf3+0x1e>
 610:	55 23       	and	r21, r21
 612:	91 f3       	breq	.-28     	; 0x5f8 <__divsf3+0x1a>
 614:	95 1b       	sub	r25, r21
 616:	55 0b       	sbc	r21, r21
 618:	bb 27       	eor	r27, r27
 61a:	aa 27       	eor	r26, r26
 61c:	62 17       	cp	r22, r18
 61e:	73 07       	cpc	r23, r19
 620:	84 07       	cpc	r24, r20
 622:	38 f0       	brcs	.+14     	; 0x632 <__divsf3_pse+0x26>
 624:	9f 5f       	subi	r25, 0xFF	; 255
 626:	5f 4f       	sbci	r21, 0xFF	; 255
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	44 1f       	adc	r20, r20
 62e:	aa 1f       	adc	r26, r26
 630:	a9 f3       	breq	.-22     	; 0x61c <__divsf3_pse+0x10>
 632:	35 d0       	rcall	.+106    	; 0x69e <__divsf3_pse+0x92>
 634:	0e 2e       	mov	r0, r30
 636:	3a f0       	brmi	.+14     	; 0x646 <__divsf3_pse+0x3a>
 638:	e0 e8       	ldi	r30, 0x80	; 128
 63a:	32 d0       	rcall	.+100    	; 0x6a0 <__divsf3_pse+0x94>
 63c:	91 50       	subi	r25, 0x01	; 1
 63e:	50 40       	sbci	r21, 0x00	; 0
 640:	e6 95       	lsr	r30
 642:	00 1c       	adc	r0, r0
 644:	ca f7       	brpl	.-14     	; 0x638 <__divsf3_pse+0x2c>
 646:	2b d0       	rcall	.+86     	; 0x69e <__divsf3_pse+0x92>
 648:	fe 2f       	mov	r31, r30
 64a:	29 d0       	rcall	.+82     	; 0x69e <__divsf3_pse+0x92>
 64c:	66 0f       	add	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	bb 1f       	adc	r27, r27
 654:	26 17       	cp	r18, r22
 656:	37 07       	cpc	r19, r23
 658:	48 07       	cpc	r20, r24
 65a:	ab 07       	cpc	r26, r27
 65c:	b0 e8       	ldi	r27, 0x80	; 128
 65e:	09 f0       	breq	.+2      	; 0x662 <__divsf3_pse+0x56>
 660:	bb 0b       	sbc	r27, r27
 662:	80 2d       	mov	r24, r0
 664:	bf 01       	movw	r22, r30
 666:	ff 27       	eor	r31, r31
 668:	93 58       	subi	r25, 0x83	; 131
 66a:	5f 4f       	sbci	r21, 0xFF	; 255
 66c:	3a f0       	brmi	.+14     	; 0x67c <__divsf3_pse+0x70>
 66e:	9e 3f       	cpi	r25, 0xFE	; 254
 670:	51 05       	cpc	r21, r1
 672:	78 f0       	brcs	.+30     	; 0x692 <__divsf3_pse+0x86>
 674:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>
 678:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 67c:	5f 3f       	cpi	r21, 0xFF	; 255
 67e:	e4 f3       	brlt	.-8      	; 0x678 <__divsf3_pse+0x6c>
 680:	98 3e       	cpi	r25, 0xE8	; 232
 682:	d4 f3       	brlt	.-12     	; 0x678 <__divsf3_pse+0x6c>
 684:	86 95       	lsr	r24
 686:	77 95       	ror	r23
 688:	67 95       	ror	r22
 68a:	b7 95       	ror	r27
 68c:	f7 95       	ror	r31
 68e:	9f 5f       	subi	r25, 0xFF	; 255
 690:	c9 f7       	brne	.-14     	; 0x684 <__divsf3_pse+0x78>
 692:	88 0f       	add	r24, r24
 694:	91 1d       	adc	r25, r1
 696:	96 95       	lsr	r25
 698:	87 95       	ror	r24
 69a:	97 f9       	bld	r25, 7
 69c:	08 95       	ret
 69e:	e1 e0       	ldi	r30, 0x01	; 1
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	88 1f       	adc	r24, r24
 6a6:	bb 1f       	adc	r27, r27
 6a8:	62 17       	cp	r22, r18
 6aa:	73 07       	cpc	r23, r19
 6ac:	84 07       	cpc	r24, r20
 6ae:	ba 07       	cpc	r27, r26
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <__divsf3_pse+0xae>
 6b2:	62 1b       	sub	r22, r18
 6b4:	73 0b       	sbc	r23, r19
 6b6:	84 0b       	sbc	r24, r20
 6b8:	ba 0b       	sbc	r27, r26
 6ba:	ee 1f       	adc	r30, r30
 6bc:	88 f7       	brcc	.-30     	; 0x6a0 <__divsf3_pse+0x94>
 6be:	e0 95       	com	r30
 6c0:	08 95       	ret

000006c2 <__fixunssfsi>:
 6c2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_splitA>
 6c6:	88 f0       	brcs	.+34     	; 0x6ea <__fixunssfsi+0x28>
 6c8:	9f 57       	subi	r25, 0x7F	; 127
 6ca:	98 f0       	brcs	.+38     	; 0x6f2 <__fixunssfsi+0x30>
 6cc:	b9 2f       	mov	r27, r25
 6ce:	99 27       	eor	r25, r25
 6d0:	b7 51       	subi	r27, 0x17	; 23
 6d2:	b0 f0       	brcs	.+44     	; 0x700 <__fixunssfsi+0x3e>
 6d4:	e1 f0       	breq	.+56     	; 0x70e <__fixunssfsi+0x4c>
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	1a f0       	brmi	.+6      	; 0x6e6 <__fixunssfsi+0x24>
 6e0:	ba 95       	dec	r27
 6e2:	c9 f7       	brne	.-14     	; 0x6d6 <__fixunssfsi+0x14>
 6e4:	14 c0       	rjmp	.+40     	; 0x70e <__fixunssfsi+0x4c>
 6e6:	b1 30       	cpi	r27, 0x01	; 1
 6e8:	91 f0       	breq	.+36     	; 0x70e <__fixunssfsi+0x4c>
 6ea:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_zero>
 6ee:	b1 e0       	ldi	r27, 0x01	; 1
 6f0:	08 95       	ret
 6f2:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_zero>
 6f6:	67 2f       	mov	r22, r23
 6f8:	78 2f       	mov	r23, r24
 6fa:	88 27       	eor	r24, r24
 6fc:	b8 5f       	subi	r27, 0xF8	; 248
 6fe:	39 f0       	breq	.+14     	; 0x70e <__fixunssfsi+0x4c>
 700:	b9 3f       	cpi	r27, 0xF9	; 249
 702:	cc f3       	brlt	.-14     	; 0x6f6 <__fixunssfsi+0x34>
 704:	86 95       	lsr	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b3 95       	inc	r27
 70c:	d9 f7       	brne	.-10     	; 0x704 <__fixunssfsi+0x42>
 70e:	3e f4       	brtc	.+14     	; 0x71e <__fixunssfsi+0x5c>
 710:	90 95       	com	r25
 712:	80 95       	com	r24
 714:	70 95       	com	r23
 716:	61 95       	neg	r22
 718:	7f 4f       	sbci	r23, 0xFF	; 255
 71a:	8f 4f       	sbci	r24, 0xFF	; 255
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	08 95       	ret

00000720 <__floatunsisf>:
 720:	e8 94       	clt
 722:	09 c0       	rjmp	.+18     	; 0x736 <__floatsisf+0x12>

00000724 <__floatsisf>:
 724:	97 fb       	bst	r25, 7
 726:	3e f4       	brtc	.+14     	; 0x736 <__floatsisf+0x12>
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	99 23       	and	r25, r25
 738:	a9 f0       	breq	.+42     	; 0x764 <__floatsisf+0x40>
 73a:	f9 2f       	mov	r31, r25
 73c:	96 e9       	ldi	r25, 0x96	; 150
 73e:	bb 27       	eor	r27, r27
 740:	93 95       	inc	r25
 742:	f6 95       	lsr	r31
 744:	87 95       	ror	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b7 95       	ror	r27
 74c:	f1 11       	cpse	r31, r1
 74e:	f8 cf       	rjmp	.-16     	; 0x740 <__floatsisf+0x1c>
 750:	fa f4       	brpl	.+62     	; 0x790 <__floatsisf+0x6c>
 752:	bb 0f       	add	r27, r27
 754:	11 f4       	brne	.+4      	; 0x75a <__floatsisf+0x36>
 756:	60 ff       	sbrs	r22, 0
 758:	1b c0       	rjmp	.+54     	; 0x790 <__floatsisf+0x6c>
 75a:	6f 5f       	subi	r22, 0xFF	; 255
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	16 c0       	rjmp	.+44     	; 0x790 <__floatsisf+0x6c>
 764:	88 23       	and	r24, r24
 766:	11 f0       	breq	.+4      	; 0x76c <__floatsisf+0x48>
 768:	96 e9       	ldi	r25, 0x96	; 150
 76a:	11 c0       	rjmp	.+34     	; 0x78e <__floatsisf+0x6a>
 76c:	77 23       	and	r23, r23
 76e:	21 f0       	breq	.+8      	; 0x778 <__floatsisf+0x54>
 770:	9e e8       	ldi	r25, 0x8E	; 142
 772:	87 2f       	mov	r24, r23
 774:	76 2f       	mov	r23, r22
 776:	05 c0       	rjmp	.+10     	; 0x782 <__floatsisf+0x5e>
 778:	66 23       	and	r22, r22
 77a:	71 f0       	breq	.+28     	; 0x798 <__floatsisf+0x74>
 77c:	96 e8       	ldi	r25, 0x86	; 134
 77e:	86 2f       	mov	r24, r22
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	2a f0       	brmi	.+10     	; 0x790 <__floatsisf+0x6c>
 786:	9a 95       	dec	r25
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	da f7       	brpl	.-10     	; 0x786 <__floatsisf+0x62>
 790:	88 0f       	add	r24, r24
 792:	96 95       	lsr	r25
 794:	87 95       	ror	r24
 796:	97 f9       	bld	r25, 7
 798:	08 95       	ret

0000079a <__fp_inf>:
 79a:	97 f9       	bld	r25, 7
 79c:	9f 67       	ori	r25, 0x7F	; 127
 79e:	80 e8       	ldi	r24, 0x80	; 128
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	08 95       	ret

000007a6 <__fp_nan>:
 7a6:	9f ef       	ldi	r25, 0xFF	; 255
 7a8:	80 ec       	ldi	r24, 0xC0	; 192
 7aa:	08 95       	ret

000007ac <__fp_pscA>:
 7ac:	00 24       	eor	r0, r0
 7ae:	0a 94       	dec	r0
 7b0:	16 16       	cp	r1, r22
 7b2:	17 06       	cpc	r1, r23
 7b4:	18 06       	cpc	r1, r24
 7b6:	09 06       	cpc	r0, r25
 7b8:	08 95       	ret

000007ba <__fp_pscB>:
 7ba:	00 24       	eor	r0, r0
 7bc:	0a 94       	dec	r0
 7be:	12 16       	cp	r1, r18
 7c0:	13 06       	cpc	r1, r19
 7c2:	14 06       	cpc	r1, r20
 7c4:	05 06       	cpc	r0, r21
 7c6:	08 95       	ret

000007c8 <__fp_round>:
 7c8:	09 2e       	mov	r0, r25
 7ca:	03 94       	inc	r0
 7cc:	00 0c       	add	r0, r0
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__fp_round+0xc>
 7d0:	88 23       	and	r24, r24
 7d2:	52 f0       	brmi	.+20     	; 0x7e8 <__fp_round+0x20>
 7d4:	bb 0f       	add	r27, r27
 7d6:	40 f4       	brcc	.+16     	; 0x7e8 <__fp_round+0x20>
 7d8:	bf 2b       	or	r27, r31
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__fp_round+0x18>
 7dc:	60 ff       	sbrs	r22, 0
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__fp_round+0x20>
 7e0:	6f 5f       	subi	r22, 0xFF	; 255
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	08 95       	ret

000007ea <__fp_split3>:
 7ea:	57 fd       	sbrc	r21, 7
 7ec:	90 58       	subi	r25, 0x80	; 128
 7ee:	44 0f       	add	r20, r20
 7f0:	55 1f       	adc	r21, r21
 7f2:	59 f0       	breq	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f4:	5f 3f       	cpi	r21, 0xFF	; 255
 7f6:	71 f0       	breq	.+28     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f8:	47 95       	ror	r20

000007fa <__fp_splitA>:
 7fa:	88 0f       	add	r24, r24
 7fc:	97 fb       	bst	r25, 7
 7fe:	99 1f       	adc	r25, r25
 800:	61 f0       	breq	.+24     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 802:	9f 3f       	cpi	r25, 0xFF	; 255
 804:	79 f0       	breq	.+30     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 806:	87 95       	ror	r24
 808:	08 95       	ret
 80a:	12 16       	cp	r1, r18
 80c:	13 06       	cpc	r1, r19
 80e:	14 06       	cpc	r1, r20
 810:	55 1f       	adc	r21, r21
 812:	f2 cf       	rjmp	.-28     	; 0x7f8 <__fp_split3+0xe>
 814:	46 95       	lsr	r20
 816:	f1 df       	rcall	.-30     	; 0x7fa <__fp_splitA>
 818:	08 c0       	rjmp	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81a:	16 16       	cp	r1, r22
 81c:	17 06       	cpc	r1, r23
 81e:	18 06       	cpc	r1, r24
 820:	99 1f       	adc	r25, r25
 822:	f1 cf       	rjmp	.-30     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 824:	86 95       	lsr	r24
 826:	71 05       	cpc	r23, r1
 828:	61 05       	cpc	r22, r1
 82a:	08 94       	sec
 82c:	08 95       	ret

0000082e <__fp_zero>:
 82e:	e8 94       	clt

00000830 <__fp_szero>:
 830:	bb 27       	eor	r27, r27
 832:	66 27       	eor	r22, r22
 834:	77 27       	eor	r23, r23
 836:	cb 01       	movw	r24, r22
 838:	97 f9       	bld	r25, 7
 83a:	08 95       	ret

0000083c <__mulsf3>:
 83c:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3x>
 840:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>
 844:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 848:	38 f0       	brcs	.+14     	; 0x858 <__mulsf3+0x1c>
 84a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 84e:	20 f0       	brcs	.+8      	; 0x858 <__mulsf3+0x1c>
 850:	95 23       	and	r25, r21
 852:	11 f0       	breq	.+4      	; 0x858 <__mulsf3+0x1c>
 854:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>
 858:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_nan>
 85c:	11 24       	eor	r1, r1
 85e:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>

00000862 <__mulsf3x>:
 862:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 866:	70 f3       	brcs	.-36     	; 0x844 <__mulsf3+0x8>

00000868 <__mulsf3_pse>:
 868:	95 9f       	mul	r25, r21
 86a:	c1 f3       	breq	.-16     	; 0x85c <__mulsf3+0x20>
 86c:	95 0f       	add	r25, r21
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	55 1f       	adc	r21, r21
 872:	62 9f       	mul	r22, r18
 874:	f0 01       	movw	r30, r0
 876:	72 9f       	mul	r23, r18
 878:	bb 27       	eor	r27, r27
 87a:	f0 0d       	add	r31, r0
 87c:	b1 1d       	adc	r27, r1
 87e:	63 9f       	mul	r22, r19
 880:	aa 27       	eor	r26, r26
 882:	f0 0d       	add	r31, r0
 884:	b1 1d       	adc	r27, r1
 886:	aa 1f       	adc	r26, r26
 888:	64 9f       	mul	r22, r20
 88a:	66 27       	eor	r22, r22
 88c:	b0 0d       	add	r27, r0
 88e:	a1 1d       	adc	r26, r1
 890:	66 1f       	adc	r22, r22
 892:	82 9f       	mul	r24, r18
 894:	22 27       	eor	r18, r18
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	62 1f       	adc	r22, r18
 89c:	73 9f       	mul	r23, r19
 89e:	b0 0d       	add	r27, r0
 8a0:	a1 1d       	adc	r26, r1
 8a2:	62 1f       	adc	r22, r18
 8a4:	83 9f       	mul	r24, r19
 8a6:	a0 0d       	add	r26, r0
 8a8:	61 1d       	adc	r22, r1
 8aa:	22 1f       	adc	r18, r18
 8ac:	74 9f       	mul	r23, r20
 8ae:	33 27       	eor	r19, r19
 8b0:	a0 0d       	add	r26, r0
 8b2:	61 1d       	adc	r22, r1
 8b4:	23 1f       	adc	r18, r19
 8b6:	84 9f       	mul	r24, r20
 8b8:	60 0d       	add	r22, r0
 8ba:	21 1d       	adc	r18, r1
 8bc:	82 2f       	mov	r24, r18
 8be:	76 2f       	mov	r23, r22
 8c0:	6a 2f       	mov	r22, r26
 8c2:	11 24       	eor	r1, r1
 8c4:	9f 57       	subi	r25, 0x7F	; 127
 8c6:	50 40       	sbci	r21, 0x00	; 0
 8c8:	9a f0       	brmi	.+38     	; 0x8f0 <__mulsf3_pse+0x88>
 8ca:	f1 f0       	breq	.+60     	; 0x908 <__stack+0x9>
 8cc:	88 23       	and	r24, r24
 8ce:	4a f0       	brmi	.+18     	; 0x8e2 <__mulsf3_pse+0x7a>
 8d0:	ee 0f       	add	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	bb 1f       	adc	r27, r27
 8d6:	66 1f       	adc	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	91 50       	subi	r25, 0x01	; 1
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	a9 f7       	brne	.-22     	; 0x8cc <__mulsf3_pse+0x64>
 8e2:	9e 3f       	cpi	r25, 0xFE	; 254
 8e4:	51 05       	cpc	r21, r1
 8e6:	80 f0       	brcs	.+32     	; 0x908 <__stack+0x9>
 8e8:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_inf>
 8ec:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 8f0:	5f 3f       	cpi	r21, 0xFF	; 255
 8f2:	e4 f3       	brlt	.-8      	; 0x8ec <__mulsf3_pse+0x84>
 8f4:	98 3e       	cpi	r25, 0xE8	; 232
 8f6:	d4 f3       	brlt	.-12     	; 0x8ec <__mulsf3_pse+0x84>
 8f8:	86 95       	lsr	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b7 95       	ror	r27
 900:	f7 95       	ror	r31
 902:	e7 95       	ror	r30
 904:	9f 5f       	subi	r25, 0xFF	; 255
 906:	c1 f7       	brne	.-16     	; 0x8f8 <__mulsf3_pse+0x90>
 908:	fe 2b       	or	r31, r30
 90a:	88 0f       	add	r24, r24
 90c:	91 1d       	adc	r25, r1
 90e:	96 95       	lsr	r25
 910:	87 95       	ror	r24
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <__divmodhi4>:
 916:	97 fb       	bst	r25, 7
 918:	07 2e       	mov	r0, r23
 91a:	16 f4       	brtc	.+4      	; 0x920 <__divmodhi4+0xa>
 91c:	00 94       	com	r0
 91e:	07 d0       	rcall	.+14     	; 0x92e <__divmodhi4_neg1>
 920:	77 fd       	sbrc	r23, 7
 922:	09 d0       	rcall	.+18     	; 0x936 <__divmodhi4_neg2>
 924:	0e 94 9f 04 	call	0x93e	; 0x93e <__udivmodhi4>
 928:	07 fc       	sbrc	r0, 7
 92a:	05 d0       	rcall	.+10     	; 0x936 <__divmodhi4_neg2>
 92c:	3e f4       	brtc	.+14     	; 0x93c <__divmodhi4_exit>

0000092e <__divmodhi4_neg1>:
 92e:	90 95       	com	r25
 930:	81 95       	neg	r24
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	08 95       	ret

00000936 <__divmodhi4_neg2>:
 936:	70 95       	com	r23
 938:	61 95       	neg	r22
 93a:	7f 4f       	sbci	r23, 0xFF	; 255

0000093c <__divmodhi4_exit>:
 93c:	08 95       	ret

0000093e <__udivmodhi4>:
 93e:	aa 1b       	sub	r26, r26
 940:	bb 1b       	sub	r27, r27
 942:	51 e1       	ldi	r21, 0x11	; 17
 944:	07 c0       	rjmp	.+14     	; 0x954 <__udivmodhi4_ep>

00000946 <__udivmodhi4_loop>:
 946:	aa 1f       	adc	r26, r26
 948:	bb 1f       	adc	r27, r27
 94a:	a6 17       	cp	r26, r22
 94c:	b7 07       	cpc	r27, r23
 94e:	10 f0       	brcs	.+4      	; 0x954 <__udivmodhi4_ep>
 950:	a6 1b       	sub	r26, r22
 952:	b7 0b       	sbc	r27, r23

00000954 <__udivmodhi4_ep>:
 954:	88 1f       	adc	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	5a 95       	dec	r21
 95a:	a9 f7       	brne	.-22     	; 0x946 <__udivmodhi4_loop>
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	bc 01       	movw	r22, r24
 962:	cd 01       	movw	r24, r26
 964:	08 95       	ret

00000966 <_exit>:
 966:	f8 94       	cli

00000968 <__stop_program>:
 968:	ff cf       	rjmp	.-2      	; 0x968 <__stop_program>
