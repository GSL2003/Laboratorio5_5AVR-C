
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000874  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000008e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbb  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091c  00000000  00000000  000016d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063e  00000000  00000000  00001fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00002630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000715  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  88:	0c 94 38 04 	jmp	0x870	; 0x870 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
#include "ADC.h"
#include <avr/io.h>

void ADC_init(void)
{
	ADMUX |= (1<<REFS0);	//Seleccionar el voltaje de referencia
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<ADLAR);	// Se define que se trabajara con 10 bits
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24
	
	// Configuración Prescaler de 128 --> 16M/128 = 125KHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);	// Se enceinde el ADC y se activa su interruptor de igual forma
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	//Entradas para los potenciometros
	DIDR0 |= (1 << ADC0D);		// Desabilitar la entrada digital PC0
  b6:	ee e7       	ldi	r30, 0x7E	; 126
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC1D);		// Desabilitar la entrada digital PC1
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <ADC_read>:
}
uint16_t ADC_read(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;			//Seleccionar el canal del ADC
  c8:	ec e7       	ldi	r30, 0x7C	; 124
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);					// Se inicia la conversión de lo valores
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));				//Se espera hasta que la conversión se haya completado 
  de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e2:	86 fd       	sbrc	r24, 6
  e4:	fc cf       	rjmp	.-8      	; 0xde <ADC_read+0x16>
	return(ADC);							//Regresa el valor de ADC
  e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ea:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ee:	08 95       	ret

000000f0 <setup>:

	}
}

void setup (void){
	UCSR0B = 0;		// Desabilita RX y TX
  f0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRC = 0;		// Se configura el puerto C como entrada
  f4:	17 b8       	out	0x07, r1	; 7
  f6:	08 95       	ret

000000f8 <main>:

void setup(void);

int main(void)
{
	cli();
  f8:	f8 94       	cli
	DDRD = 0xFF;			//Configuración del puerto D
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8a b9       	out	0x0a, r24	; 10
	
	TCCR2A = 0;
  fe:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 102:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//Se llaman a las librerias establecidas en ADC y PWM1
	ADC_init();
 106:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	PWM1_initial();
 10a:	0e 94 ca 00 	call	0x194	; 0x194 <PWM1_initial>
	PWM2_initial(no_invertido,1024);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	74 e0       	ldi	r23, 0x04	; 4
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 78 01 	call	0x2f0	; 0x2f0 <PWM2_initial>
	setup();
 118:	0e 94 78 00 	call	0xf0	; 0xf0 <setup>
	
	sei();
 11c:	78 94       	sei

	while (1)
	{
		//Configuración Servomotor#1 - PB1
		ADC_V1 = ADC_read(0);		//Lee el canal 0 del puerto C (PC0)
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_read>
 124:	bc 01       	movw	r22, r24
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 3d 03 	call	0x67a	; 0x67a <__floatunsisf>
 12e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <ADC_V1>
 132:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <ADC_V1+0x1>
 136:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADC_V1+0x2>
 13a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ADC_V1+0x3>
		servo_moA1(ADC_V1);			//Realiza la señal del canal A
 13e:	0e 94 48 01 	call	0x290	; 0x290 <servo_moA1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9c e9       	ldi	r25, 0x9C	; 156
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x4e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x54>
 14c:	00 00       	nop
		_delay_ms(10);				//Implementar un delay de 10ms para que el giro del servo sea más fluido
		
		ADC_V2 = ADC_read(1);		//Lee el canal 0 del puerto C (PC1)
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_read>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		servo_mo2(ADC_V2);			//Realiza la señal del canal A
 158:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <servo_mo2>
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9c e9       	ldi	r25, 0x9C	; 156
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x68>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x6e>
 166:	00 00       	nop
 168:	da cf       	rjmp	.-76     	; 0x11e <main+0x26>

0000016a <__vector_21>:
void setup (void){
	UCSR0B = 0;		// Desabilita RX y TX
	DDRC = 0;		// Se configura el puerto C como entrada
}

ISR(ADC_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	ADCSRA |= (1 << ADIF);	//Limpiar la bandera al encender el ADC
 17a:	ea e7       	ldi	r30, 0x7A	; 122
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 61       	ori	r24, 0x10	; 16
 182:	80 83       	st	Z, r24
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <PWM1_initial>:
#include "PWM1.h"
#include <avr/io.h>

void PWM1_initial(void){
	//Configuración valores de entrada
	DDRB |= (1<<DDB1)|(1<<DDB2);
 194:	84 b1       	in	r24, 0x04	; 4
 196:	86 60       	ori	r24, 0x06	; 6
 198:	84 b9       	out	0x04, r24	; 4
	
	TCNT1 = 0;				//Se configura el RESET
 19a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 19e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 39999;			//Se configura el TOP
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9c e9       	ldi	r25, 0x9C	; 156
 1a6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ;		//Salida en nivel bajo --> Se compara la coincidencia
 1ae:	e0 e8       	ldi	r30, 0x80	; 128
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 ea       	ldi	r24, 0xA0	; 160
 1b4:	80 83       	st	Z, r24
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Configuración PWM MODO:Fast TOP ICR1
 1b6:	80 81       	ld	r24, Z
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Modo Fast PWM TOP ---> ICR1
 1bc:	e1 e8       	ldi	r30, 0x81	; 129
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	88 e1       	ldi	r24, 0x18	; 24
 1c2:	80 83       	st	Z, r24
	
	// Configuración del Prescaler: 8
	TCCR1B |= (1 << CS11);
 1c4:	80 81       	ld	r24, Z
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <map>:

void servo_moB1(float adc_Value){					//Configuración del movimiento del servo canal B
	OCR1B = map(adc_Value, 0, 1024, 1000, 4800);
}

uint16_t map(float x, float in_min, float in_max, float out_min, float out_max){
 1cc:	4f 92       	push	r4
 1ce:	5f 92       	push	r5
 1d0:	6f 92       	push	r6
 1d2:	7f 92       	push	r7
 1d4:	af 92       	push	r10
 1d6:	bf 92       	push	r11
 1d8:	cf 92       	push	r12
 1da:	df 92       	push	r13
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	28 97       	sbiw	r28, 0x08	; 8
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	29 01       	movw	r4, r18
 1fa:	3a 01       	movw	r6, r20
 1fc:	ed 82       	std	Y+5, r14	; 0x05
 1fe:	fe 82       	std	Y+6, r15	; 0x06
 200:	0f 83       	std	Y+7, r16	; 0x07
 202:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 204:	0e 94 2f 02 	call	0x45e	; 0x45e <__subsf3>
 208:	69 83       	std	Y+1, r22	; 0x01
 20a:	7a 83       	std	Y+2, r23	; 0x02
 20c:	8b 83       	std	Y+3, r24	; 0x03
 20e:	9c 83       	std	Y+4, r25	; 0x04
 210:	a6 01       	movw	r20, r12
 212:	95 01       	movw	r18, r10
 214:	69 8d       	ldd	r22, Y+25	; 0x19
 216:	7a 8d       	ldd	r23, Y+26	; 0x1a
 218:	8b 8d       	ldd	r24, Y+27	; 0x1b
 21a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 21c:	0e 94 2f 02 	call	0x45e	; 0x45e <__subsf3>
 220:	9b 01       	movw	r18, r22
 222:	ac 01       	movw	r20, r24
 224:	69 81       	ldd	r22, Y+1	; 0x01
 226:	7a 81       	ldd	r23, Y+2	; 0x02
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	9c 81       	ldd	r25, Y+4	; 0x04
 22c:	0e 94 cb 03 	call	0x796	; 0x796 <__mulsf3>
 230:	69 83       	std	Y+1, r22	; 0x01
 232:	7a 83       	std	Y+2, r23	; 0x02
 234:	8b 83       	std	Y+3, r24	; 0x03
 236:	9c 83       	std	Y+4, r25	; 0x04
 238:	a3 01       	movw	r20, r6
 23a:	92 01       	movw	r18, r4
 23c:	c8 01       	movw	r24, r16
 23e:	b7 01       	movw	r22, r14
 240:	0e 94 2f 02 	call	0x45e	; 0x45e <__subsf3>
 244:	9b 01       	movw	r18, r22
 246:	ac 01       	movw	r20, r24
 248:	69 81       	ldd	r22, Y+1	; 0x01
 24a:	7a 81       	ldd	r23, Y+2	; 0x02
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	9c 81       	ldd	r25, Y+4	; 0x04
 250:	0e 94 9c 02 	call	0x538	; 0x538 <__divsf3>
 254:	9b 01       	movw	r18, r22
 256:	ac 01       	movw	r20, r24
 258:	c6 01       	movw	r24, r12
 25a:	b5 01       	movw	r22, r10
 25c:	0e 94 30 02 	call	0x460	; 0x460 <__addsf3>
 260:	0e 94 0e 03 	call	0x61c	; 0x61c <__fixunssfsi>
 264:	cb 01       	movw	r24, r22
 266:	28 96       	adiw	r28, 0x08	; 8
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	bf 90       	pop	r11
 284:	af 90       	pop	r10
 286:	7f 90       	pop	r7
 288:	6f 90       	pop	r6
 28a:	5f 90       	pop	r5
 28c:	4f 90       	pop	r4
 28e:	08 95       	ret

00000290 <servo_moA1>:
	
	// Configuración del Prescaler: 8
	TCCR1B |= (1 << CS11);
}

void servo_moA1(float adc_Value){					//Configuración del movimiento del servo canal A
 290:	af 92       	push	r10
 292:	bf 92       	push	r11
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
	//// Mapear el valor del potenciómetro al ciclo de trabajo del PWM
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
 2a0:	25 e4       	ldi	r18, 0x45	; 69
 2a2:	2f 93       	push	r18
 2a4:	26 e9       	ldi	r18, 0x96	; 150
 2a6:	2f 93       	push	r18
 2a8:	1f 92       	push	r1
 2aa:	1f 92       	push	r1
 2ac:	0f 2e       	mov	r0, r31
 2ae:	a1 2c       	mov	r10, r1
 2b0:	b1 2c       	mov	r11, r1
 2b2:	fa e7       	ldi	r31, 0x7A	; 122
 2b4:	cf 2e       	mov	r12, r31
 2b6:	f4 e4       	ldi	r31, 0x44	; 68
 2b8:	df 2e       	mov	r13, r31
 2ba:	f0 2d       	mov	r31, r0
 2bc:	e1 2c       	mov	r14, r1
 2be:	f1 2c       	mov	r15, r1
 2c0:	00 e8       	ldi	r16, 0x80	; 128
 2c2:	14 e4       	ldi	r17, 0x44	; 68
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	a9 01       	movw	r20, r18
 2ca:	0e 94 e6 00 	call	0x1cc	; 0x1cc <map>
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	cf 90       	pop	r12
 2ea:	bf 90       	pop	r11
 2ec:	af 90       	pop	r10
 2ee:	08 95       	ret

000002f0 <PWM2_initial>:

//->Configuración PWM Timer2

void PWM2_initial(uint8_t inverted, uint16_t prescaler){			//Configuración del Canal A
	//Declarar saldias
	DDRB |= (1 << DDB3); //Se define el pin PB3 como salida
 2f0:	94 b1       	in	r25, 0x04	; 4
 2f2:	98 60       	ori	r25, 0x08	; 8
 2f4:	94 b9       	out	0x04, r25	; 4
	
	//Configuración modo Fast
	TCCR2A |= (1 << WGM21)|(1 << WGM20); 
 2f6:	e0 eb       	ldi	r30, 0xB0	; 176
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	90 81       	ld	r25, Z
 2fc:	93 60       	ori	r25, 0x03	; 3
 2fe:	90 83       	st	Z, r25
	
	//Configuración de PWM INVERTIDO
	if (inverted) {
 300:	88 23       	and	r24, r24
 302:	21 f0       	breq	.+8      	; 0x30c <PWM2_initial+0x1c>
		TCCR2A |= (1 << COM2A1)|(1 << COM2A0);
 304:	80 81       	ld	r24, Z
 306:	80 6c       	ori	r24, 0xC0	; 192
 308:	80 83       	st	Z, r24
 30a:	05 c0       	rjmp	.+10     	; 0x316 <PWM2_initial+0x26>
		} else	 {	//PWM NO INVERTIDO
		TCCR2A |= (1 << COM2A1);
 30c:	e0 eb       	ldi	r30, 0xB0	; 176
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	80 68       	ori	r24, 0x80	; 128
 314:	80 83       	st	Z, r24
	}

	//Configuración Prescaler de 1024
	if (prescaler == 1024) {
 316:	61 15       	cp	r22, r1
 318:	74 40       	sbci	r23, 0x04	; 4
 31a:	31 f4       	brne	.+12     	; 0x328 <PWM2_initial+0x38>
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
 31c:	e1 eb       	ldi	r30, 0xB1	; 177
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	87 60       	ori	r24, 0x07	; 7
 324:	80 83       	st	Z, r24
 326:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
 328:	e1 eb       	ldi	r30, 0xB1	; 177
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	80 83       	st	Z, r24
 332:	08 95       	ret

00000334 <map1>:
void servo_mo2(uint8_t duty){		//Mapeo canal A
	OCR2A = map1(duty,0,200,6,36);
}

//Declarar una función de mapeo para convertir el valor del potenciómetro
float map1(float x, float in_min, float in_max, float out_min, float out_max){
 334:	4f 92       	push	r4
 336:	5f 92       	push	r5
 338:	6f 92       	push	r6
 33a:	7f 92       	push	r7
 33c:	af 92       	push	r10
 33e:	bf 92       	push	r11
 340:	cf 92       	push	r12
 342:	df 92       	push	r13
 344:	ef 92       	push	r14
 346:	ff 92       	push	r15
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	28 97       	sbiw	r28, 0x08	; 8
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	29 01       	movw	r4, r18
 362:	3a 01       	movw	r6, r20
 364:	ed 82       	std	Y+5, r14	; 0x05
 366:	fe 82       	std	Y+6, r15	; 0x06
 368:	0f 83       	std	Y+7, r16	; 0x07
 36a:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 36c:	0e 94 2f 02 	call	0x45e	; 0x45e <__subsf3>
 370:	69 83       	std	Y+1, r22	; 0x01
 372:	7a 83       	std	Y+2, r23	; 0x02
 374:	8b 83       	std	Y+3, r24	; 0x03
 376:	9c 83       	std	Y+4, r25	; 0x04
 378:	a6 01       	movw	r20, r12
 37a:	95 01       	movw	r18, r10
 37c:	69 8d       	ldd	r22, Y+25	; 0x19
 37e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 380:	8b 8d       	ldd	r24, Y+27	; 0x1b
 382:	9c 8d       	ldd	r25, Y+28	; 0x1c
 384:	0e 94 2f 02 	call	0x45e	; 0x45e <__subsf3>
 388:	9b 01       	movw	r18, r22
 38a:	ac 01       	movw	r20, r24
 38c:	69 81       	ldd	r22, Y+1	; 0x01
 38e:	7a 81       	ldd	r23, Y+2	; 0x02
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	9c 81       	ldd	r25, Y+4	; 0x04
 394:	0e 94 cb 03 	call	0x796	; 0x796 <__mulsf3>
 398:	69 83       	std	Y+1, r22	; 0x01
 39a:	7a 83       	std	Y+2, r23	; 0x02
 39c:	8b 83       	std	Y+3, r24	; 0x03
 39e:	9c 83       	std	Y+4, r25	; 0x04
 3a0:	a3 01       	movw	r20, r6
 3a2:	92 01       	movw	r18, r4
 3a4:	c8 01       	movw	r24, r16
 3a6:	b7 01       	movw	r22, r14
 3a8:	0e 94 2f 02 	call	0x45e	; 0x45e <__subsf3>
 3ac:	9b 01       	movw	r18, r22
 3ae:	ac 01       	movw	r20, r24
 3b0:	69 81       	ldd	r22, Y+1	; 0x01
 3b2:	7a 81       	ldd	r23, Y+2	; 0x02
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	9c 81       	ldd	r25, Y+4	; 0x04
 3b8:	0e 94 9c 02 	call	0x538	; 0x538 <__divsf3>
 3bc:	9b 01       	movw	r18, r22
 3be:	ac 01       	movw	r20, r24
 3c0:	c6 01       	movw	r24, r12
 3c2:	b5 01       	movw	r22, r10
 3c4:	0e 94 30 02 	call	0x460	; 0x460 <__addsf3>
 3c8:	28 96       	adiw	r28, 0x08	; 8
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	cf 90       	pop	r12
 3e4:	bf 90       	pop	r11
 3e6:	af 90       	pop	r10
 3e8:	7f 90       	pop	r7
 3ea:	6f 90       	pop	r6
 3ec:	5f 90       	pop	r5
 3ee:	4f 90       	pop	r4
 3f0:	08 95       	ret

000003f2 <servo_mo2>:
		} else {
		TCCR2B |= (1 << CS20);
	}
}

void servo_mo2(uint8_t duty){		//Mapeo canal A
 3f2:	af 92       	push	r10
 3f4:	bf 92       	push	r11
 3f6:	cf 92       	push	r12
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
	OCR2A = map1(duty,0,200,6,36);
 402:	68 2f       	mov	r22, r24
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 3d 03 	call	0x67a	; 0x67a <__floatunsisf>
 40e:	22 e4       	ldi	r18, 0x42	; 66
 410:	2f 93       	push	r18
 412:	20 e1       	ldi	r18, 0x10	; 16
 414:	2f 93       	push	r18
 416:	1f 92       	push	r1
 418:	1f 92       	push	r1
 41a:	0f 2e       	mov	r0, r31
 41c:	a1 2c       	mov	r10, r1
 41e:	b1 2c       	mov	r11, r1
 420:	f0 ec       	ldi	r31, 0xC0	; 192
 422:	cf 2e       	mov	r12, r31
 424:	f0 e4       	ldi	r31, 0x40	; 64
 426:	df 2e       	mov	r13, r31
 428:	f0 2d       	mov	r31, r0
 42a:	e1 2c       	mov	r14, r1
 42c:	f1 2c       	mov	r15, r1
 42e:	08 e4       	ldi	r16, 0x48	; 72
 430:	13 e4       	ldi	r17, 0x43	; 67
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	a9 01       	movw	r20, r18
 438:	0e 94 9a 01 	call	0x334	; 0x334 <map1>
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0e 94 0e 03 	call	0x61c	; 0x61c <__fixunssfsi>
 448:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	df 90       	pop	r13
 456:	cf 90       	pop	r12
 458:	bf 90       	pop	r11
 45a:	af 90       	pop	r10
 45c:	08 95       	ret

0000045e <__subsf3>:
 45e:	50 58       	subi	r21, 0x80	; 128

00000460 <__addsf3>:
 460:	bb 27       	eor	r27, r27
 462:	aa 27       	eor	r26, r26
 464:	0e 94 47 02 	call	0x48e	; 0x48e <__addsf3x>
 468:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>
 46c:	0e 94 83 03 	call	0x706	; 0x706 <__fp_pscA>
 470:	38 f0       	brcs	.+14     	; 0x480 <__addsf3+0x20>
 472:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscB>
 476:	20 f0       	brcs	.+8      	; 0x480 <__addsf3+0x20>
 478:	39 f4       	brne	.+14     	; 0x488 <__addsf3+0x28>
 47a:	9f 3f       	cpi	r25, 0xFF	; 255
 47c:	19 f4       	brne	.+6      	; 0x484 <__addsf3+0x24>
 47e:	26 f4       	brtc	.+8      	; 0x488 <__addsf3+0x28>
 480:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>
 484:	0e f4       	brtc	.+2      	; 0x488 <__addsf3+0x28>
 486:	e0 95       	com	r30
 488:	e7 fb       	bst	r30, 7
 48a:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>

0000048e <__addsf3x>:
 48e:	e9 2f       	mov	r30, r25
 490:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 494:	58 f3       	brcs	.-42     	; 0x46c <__addsf3+0xc>
 496:	ba 17       	cp	r27, r26
 498:	62 07       	cpc	r22, r18
 49a:	73 07       	cpc	r23, r19
 49c:	84 07       	cpc	r24, r20
 49e:	95 07       	cpc	r25, r21
 4a0:	20 f0       	brcs	.+8      	; 0x4aa <__addsf3x+0x1c>
 4a2:	79 f4       	brne	.+30     	; 0x4c2 <__addsf3x+0x34>
 4a4:	a6 f5       	brtc	.+104    	; 0x50e <__addsf3x+0x80>
 4a6:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_zero>
 4aa:	0e f4       	brtc	.+2      	; 0x4ae <__addsf3x+0x20>
 4ac:	e0 95       	com	r30
 4ae:	0b 2e       	mov	r0, r27
 4b0:	ba 2f       	mov	r27, r26
 4b2:	a0 2d       	mov	r26, r0
 4b4:	0b 01       	movw	r0, r22
 4b6:	b9 01       	movw	r22, r18
 4b8:	90 01       	movw	r18, r0
 4ba:	0c 01       	movw	r0, r24
 4bc:	ca 01       	movw	r24, r20
 4be:	a0 01       	movw	r20, r0
 4c0:	11 24       	eor	r1, r1
 4c2:	ff 27       	eor	r31, r31
 4c4:	59 1b       	sub	r21, r25
 4c6:	99 f0       	breq	.+38     	; 0x4ee <__addsf3x+0x60>
 4c8:	59 3f       	cpi	r21, 0xF9	; 249
 4ca:	50 f4       	brcc	.+20     	; 0x4e0 <__addsf3x+0x52>
 4cc:	50 3e       	cpi	r21, 0xE0	; 224
 4ce:	68 f1       	brcs	.+90     	; 0x52a <__addsf3x+0x9c>
 4d0:	1a 16       	cp	r1, r26
 4d2:	f0 40       	sbci	r31, 0x00	; 0
 4d4:	a2 2f       	mov	r26, r18
 4d6:	23 2f       	mov	r18, r19
 4d8:	34 2f       	mov	r19, r20
 4da:	44 27       	eor	r20, r20
 4dc:	58 5f       	subi	r21, 0xF8	; 248
 4de:	f3 cf       	rjmp	.-26     	; 0x4c6 <__addsf3x+0x38>
 4e0:	46 95       	lsr	r20
 4e2:	37 95       	ror	r19
 4e4:	27 95       	ror	r18
 4e6:	a7 95       	ror	r26
 4e8:	f0 40       	sbci	r31, 0x00	; 0
 4ea:	53 95       	inc	r21
 4ec:	c9 f7       	brne	.-14     	; 0x4e0 <__addsf3x+0x52>
 4ee:	7e f4       	brtc	.+30     	; 0x50e <__addsf3x+0x80>
 4f0:	1f 16       	cp	r1, r31
 4f2:	ba 0b       	sbc	r27, r26
 4f4:	62 0b       	sbc	r22, r18
 4f6:	73 0b       	sbc	r23, r19
 4f8:	84 0b       	sbc	r24, r20
 4fa:	ba f0       	brmi	.+46     	; 0x52a <__addsf3x+0x9c>
 4fc:	91 50       	subi	r25, 0x01	; 1
 4fe:	a1 f0       	breq	.+40     	; 0x528 <__addsf3x+0x9a>
 500:	ff 0f       	add	r31, r31
 502:	bb 1f       	adc	r27, r27
 504:	66 1f       	adc	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	c2 f7       	brpl	.-16     	; 0x4fc <__addsf3x+0x6e>
 50c:	0e c0       	rjmp	.+28     	; 0x52a <__addsf3x+0x9c>
 50e:	ba 0f       	add	r27, r26
 510:	62 1f       	adc	r22, r18
 512:	73 1f       	adc	r23, r19
 514:	84 1f       	adc	r24, r20
 516:	48 f4       	brcc	.+18     	; 0x52a <__addsf3x+0x9c>
 518:	87 95       	ror	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b7 95       	ror	r27
 520:	f7 95       	ror	r31
 522:	9e 3f       	cpi	r25, 0xFE	; 254
 524:	08 f0       	brcs	.+2      	; 0x528 <__addsf3x+0x9a>
 526:	b0 cf       	rjmp	.-160    	; 0x488 <__addsf3+0x28>
 528:	93 95       	inc	r25
 52a:	88 0f       	add	r24, r24
 52c:	08 f0       	brcs	.+2      	; 0x530 <__addsf3x+0xa2>
 52e:	99 27       	eor	r25, r25
 530:	ee 0f       	add	r30, r30
 532:	97 95       	ror	r25
 534:	87 95       	ror	r24
 536:	08 95       	ret

00000538 <__divsf3>:
 538:	0e 94 b0 02 	call	0x560	; 0x560 <__divsf3x>
 53c:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>
 540:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscB>
 544:	58 f0       	brcs	.+22     	; 0x55c <__divsf3+0x24>
 546:	0e 94 83 03 	call	0x706	; 0x706 <__fp_pscA>
 54a:	40 f0       	brcs	.+16     	; 0x55c <__divsf3+0x24>
 54c:	29 f4       	brne	.+10     	; 0x558 <__divsf3+0x20>
 54e:	5f 3f       	cpi	r21, 0xFF	; 255
 550:	29 f0       	breq	.+10     	; 0x55c <__divsf3+0x24>
 552:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 556:	51 11       	cpse	r21, r1
 558:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 55c:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>

00000560 <__divsf3x>:
 560:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 564:	68 f3       	brcs	.-38     	; 0x540 <__divsf3+0x8>

00000566 <__divsf3_pse>:
 566:	99 23       	and	r25, r25
 568:	b1 f3       	breq	.-20     	; 0x556 <__divsf3+0x1e>
 56a:	55 23       	and	r21, r21
 56c:	91 f3       	breq	.-28     	; 0x552 <__divsf3+0x1a>
 56e:	95 1b       	sub	r25, r21
 570:	55 0b       	sbc	r21, r21
 572:	bb 27       	eor	r27, r27
 574:	aa 27       	eor	r26, r26
 576:	62 17       	cp	r22, r18
 578:	73 07       	cpc	r23, r19
 57a:	84 07       	cpc	r24, r20
 57c:	38 f0       	brcs	.+14     	; 0x58c <__divsf3_pse+0x26>
 57e:	9f 5f       	subi	r25, 0xFF	; 255
 580:	5f 4f       	sbci	r21, 0xFF	; 255
 582:	22 0f       	add	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	44 1f       	adc	r20, r20
 588:	aa 1f       	adc	r26, r26
 58a:	a9 f3       	breq	.-22     	; 0x576 <__divsf3_pse+0x10>
 58c:	35 d0       	rcall	.+106    	; 0x5f8 <__divsf3_pse+0x92>
 58e:	0e 2e       	mov	r0, r30
 590:	3a f0       	brmi	.+14     	; 0x5a0 <__divsf3_pse+0x3a>
 592:	e0 e8       	ldi	r30, 0x80	; 128
 594:	32 d0       	rcall	.+100    	; 0x5fa <__divsf3_pse+0x94>
 596:	91 50       	subi	r25, 0x01	; 1
 598:	50 40       	sbci	r21, 0x00	; 0
 59a:	e6 95       	lsr	r30
 59c:	00 1c       	adc	r0, r0
 59e:	ca f7       	brpl	.-14     	; 0x592 <__divsf3_pse+0x2c>
 5a0:	2b d0       	rcall	.+86     	; 0x5f8 <__divsf3_pse+0x92>
 5a2:	fe 2f       	mov	r31, r30
 5a4:	29 d0       	rcall	.+82     	; 0x5f8 <__divsf3_pse+0x92>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	bb 1f       	adc	r27, r27
 5ae:	26 17       	cp	r18, r22
 5b0:	37 07       	cpc	r19, r23
 5b2:	48 07       	cpc	r20, r24
 5b4:	ab 07       	cpc	r26, r27
 5b6:	b0 e8       	ldi	r27, 0x80	; 128
 5b8:	09 f0       	breq	.+2      	; 0x5bc <__divsf3_pse+0x56>
 5ba:	bb 0b       	sbc	r27, r27
 5bc:	80 2d       	mov	r24, r0
 5be:	bf 01       	movw	r22, r30
 5c0:	ff 27       	eor	r31, r31
 5c2:	93 58       	subi	r25, 0x83	; 131
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	3a f0       	brmi	.+14     	; 0x5d6 <__divsf3_pse+0x70>
 5c8:	9e 3f       	cpi	r25, 0xFE	; 254
 5ca:	51 05       	cpc	r21, r1
 5cc:	78 f0       	brcs	.+30     	; 0x5ec <__divsf3_pse+0x86>
 5ce:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 5d2:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 5d6:	5f 3f       	cpi	r21, 0xFF	; 255
 5d8:	e4 f3       	brlt	.-8      	; 0x5d2 <__divsf3_pse+0x6c>
 5da:	98 3e       	cpi	r25, 0xE8	; 232
 5dc:	d4 f3       	brlt	.-12     	; 0x5d2 <__divsf3_pse+0x6c>
 5de:	86 95       	lsr	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f7 95       	ror	r31
 5e8:	9f 5f       	subi	r25, 0xFF	; 255
 5ea:	c9 f7       	brne	.-14     	; 0x5de <__divsf3_pse+0x78>
 5ec:	88 0f       	add	r24, r24
 5ee:	91 1d       	adc	r25, r1
 5f0:	96 95       	lsr	r25
 5f2:	87 95       	ror	r24
 5f4:	97 f9       	bld	r25, 7
 5f6:	08 95       	ret
 5f8:	e1 e0       	ldi	r30, 0x01	; 1
 5fa:	66 0f       	add	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	bb 1f       	adc	r27, r27
 602:	62 17       	cp	r22, r18
 604:	73 07       	cpc	r23, r19
 606:	84 07       	cpc	r24, r20
 608:	ba 07       	cpc	r27, r26
 60a:	20 f0       	brcs	.+8      	; 0x614 <__divsf3_pse+0xae>
 60c:	62 1b       	sub	r22, r18
 60e:	73 0b       	sbc	r23, r19
 610:	84 0b       	sbc	r24, r20
 612:	ba 0b       	sbc	r27, r26
 614:	ee 1f       	adc	r30, r30
 616:	88 f7       	brcc	.-30     	; 0x5fa <__divsf3_pse+0x94>
 618:	e0 95       	com	r30
 61a:	08 95       	ret

0000061c <__fixunssfsi>:
 61c:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_splitA>
 620:	88 f0       	brcs	.+34     	; 0x644 <__fixunssfsi+0x28>
 622:	9f 57       	subi	r25, 0x7F	; 127
 624:	98 f0       	brcs	.+38     	; 0x64c <__fixunssfsi+0x30>
 626:	b9 2f       	mov	r27, r25
 628:	99 27       	eor	r25, r25
 62a:	b7 51       	subi	r27, 0x17	; 23
 62c:	b0 f0       	brcs	.+44     	; 0x65a <__fixunssfsi+0x3e>
 62e:	e1 f0       	breq	.+56     	; 0x668 <__fixunssfsi+0x4c>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	1a f0       	brmi	.+6      	; 0x640 <__fixunssfsi+0x24>
 63a:	ba 95       	dec	r27
 63c:	c9 f7       	brne	.-14     	; 0x630 <__fixunssfsi+0x14>
 63e:	14 c0       	rjmp	.+40     	; 0x668 <__fixunssfsi+0x4c>
 640:	b1 30       	cpi	r27, 0x01	; 1
 642:	91 f0       	breq	.+36     	; 0x668 <__fixunssfsi+0x4c>
 644:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_zero>
 648:	b1 e0       	ldi	r27, 0x01	; 1
 64a:	08 95       	ret
 64c:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_zero>
 650:	67 2f       	mov	r22, r23
 652:	78 2f       	mov	r23, r24
 654:	88 27       	eor	r24, r24
 656:	b8 5f       	subi	r27, 0xF8	; 248
 658:	39 f0       	breq	.+14     	; 0x668 <__fixunssfsi+0x4c>
 65a:	b9 3f       	cpi	r27, 0xF9	; 249
 65c:	cc f3       	brlt	.-14     	; 0x650 <__fixunssfsi+0x34>
 65e:	86 95       	lsr	r24
 660:	77 95       	ror	r23
 662:	67 95       	ror	r22
 664:	b3 95       	inc	r27
 666:	d9 f7       	brne	.-10     	; 0x65e <__fixunssfsi+0x42>
 668:	3e f4       	brtc	.+14     	; 0x678 <__fixunssfsi+0x5c>
 66a:	90 95       	com	r25
 66c:	80 95       	com	r24
 66e:	70 95       	com	r23
 670:	61 95       	neg	r22
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	08 95       	ret

0000067a <__floatunsisf>:
 67a:	e8 94       	clt
 67c:	09 c0       	rjmp	.+18     	; 0x690 <__floatsisf+0x12>

0000067e <__floatsisf>:
 67e:	97 fb       	bst	r25, 7
 680:	3e f4       	brtc	.+14     	; 0x690 <__floatsisf+0x12>
 682:	90 95       	com	r25
 684:	80 95       	com	r24
 686:	70 95       	com	r23
 688:	61 95       	neg	r22
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	99 23       	and	r25, r25
 692:	a9 f0       	breq	.+42     	; 0x6be <__floatsisf+0x40>
 694:	f9 2f       	mov	r31, r25
 696:	96 e9       	ldi	r25, 0x96	; 150
 698:	bb 27       	eor	r27, r27
 69a:	93 95       	inc	r25
 69c:	f6 95       	lsr	r31
 69e:	87 95       	ror	r24
 6a0:	77 95       	ror	r23
 6a2:	67 95       	ror	r22
 6a4:	b7 95       	ror	r27
 6a6:	f1 11       	cpse	r31, r1
 6a8:	f8 cf       	rjmp	.-16     	; 0x69a <__floatsisf+0x1c>
 6aa:	fa f4       	brpl	.+62     	; 0x6ea <__floatsisf+0x6c>
 6ac:	bb 0f       	add	r27, r27
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <__floatsisf+0x36>
 6b0:	60 ff       	sbrs	r22, 0
 6b2:	1b c0       	rjmp	.+54     	; 0x6ea <__floatsisf+0x6c>
 6b4:	6f 5f       	subi	r22, 0xFF	; 255
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	16 c0       	rjmp	.+44     	; 0x6ea <__floatsisf+0x6c>
 6be:	88 23       	and	r24, r24
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <__floatsisf+0x48>
 6c2:	96 e9       	ldi	r25, 0x96	; 150
 6c4:	11 c0       	rjmp	.+34     	; 0x6e8 <__floatsisf+0x6a>
 6c6:	77 23       	and	r23, r23
 6c8:	21 f0       	breq	.+8      	; 0x6d2 <__floatsisf+0x54>
 6ca:	9e e8       	ldi	r25, 0x8E	; 142
 6cc:	87 2f       	mov	r24, r23
 6ce:	76 2f       	mov	r23, r22
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <__floatsisf+0x5e>
 6d2:	66 23       	and	r22, r22
 6d4:	71 f0       	breq	.+28     	; 0x6f2 <__floatsisf+0x74>
 6d6:	96 e8       	ldi	r25, 0x86	; 134
 6d8:	86 2f       	mov	r24, r22
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	2a f0       	brmi	.+10     	; 0x6ea <__floatsisf+0x6c>
 6e0:	9a 95       	dec	r25
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	da f7       	brpl	.-10     	; 0x6e0 <__floatsisf+0x62>
 6ea:	88 0f       	add	r24, r24
 6ec:	96 95       	lsr	r25
 6ee:	87 95       	ror	r24
 6f0:	97 f9       	bld	r25, 7
 6f2:	08 95       	ret

000006f4 <__fp_inf>:
 6f4:	97 f9       	bld	r25, 7
 6f6:	9f 67       	ori	r25, 0x7F	; 127
 6f8:	80 e8       	ldi	r24, 0x80	; 128
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	08 95       	ret

00000700 <__fp_nan>:
 700:	9f ef       	ldi	r25, 0xFF	; 255
 702:	80 ec       	ldi	r24, 0xC0	; 192
 704:	08 95       	ret

00000706 <__fp_pscA>:
 706:	00 24       	eor	r0, r0
 708:	0a 94       	dec	r0
 70a:	16 16       	cp	r1, r22
 70c:	17 06       	cpc	r1, r23
 70e:	18 06       	cpc	r1, r24
 710:	09 06       	cpc	r0, r25
 712:	08 95       	ret

00000714 <__fp_pscB>:
 714:	00 24       	eor	r0, r0
 716:	0a 94       	dec	r0
 718:	12 16       	cp	r1, r18
 71a:	13 06       	cpc	r1, r19
 71c:	14 06       	cpc	r1, r20
 71e:	05 06       	cpc	r0, r21
 720:	08 95       	ret

00000722 <__fp_round>:
 722:	09 2e       	mov	r0, r25
 724:	03 94       	inc	r0
 726:	00 0c       	add	r0, r0
 728:	11 f4       	brne	.+4      	; 0x72e <__fp_round+0xc>
 72a:	88 23       	and	r24, r24
 72c:	52 f0       	brmi	.+20     	; 0x742 <__fp_round+0x20>
 72e:	bb 0f       	add	r27, r27
 730:	40 f4       	brcc	.+16     	; 0x742 <__fp_round+0x20>
 732:	bf 2b       	or	r27, r31
 734:	11 f4       	brne	.+4      	; 0x73a <__fp_round+0x18>
 736:	60 ff       	sbrs	r22, 0
 738:	04 c0       	rjmp	.+8      	; 0x742 <__fp_round+0x20>
 73a:	6f 5f       	subi	r22, 0xFF	; 255
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__fp_split3>:
 744:	57 fd       	sbrc	r21, 7
 746:	90 58       	subi	r25, 0x80	; 128
 748:	44 0f       	add	r20, r20
 74a:	55 1f       	adc	r21, r21
 74c:	59 f0       	breq	.+22     	; 0x764 <__fp_splitA+0x10>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	71 f0       	breq	.+28     	; 0x76e <__fp_splitA+0x1a>
 752:	47 95       	ror	r20

00000754 <__fp_splitA>:
 754:	88 0f       	add	r24, r24
 756:	97 fb       	bst	r25, 7
 758:	99 1f       	adc	r25, r25
 75a:	61 f0       	breq	.+24     	; 0x774 <__fp_splitA+0x20>
 75c:	9f 3f       	cpi	r25, 0xFF	; 255
 75e:	79 f0       	breq	.+30     	; 0x77e <__fp_splitA+0x2a>
 760:	87 95       	ror	r24
 762:	08 95       	ret
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	55 1f       	adc	r21, r21
 76c:	f2 cf       	rjmp	.-28     	; 0x752 <__fp_split3+0xe>
 76e:	46 95       	lsr	r20
 770:	f1 df       	rcall	.-30     	; 0x754 <__fp_splitA>
 772:	08 c0       	rjmp	.+16     	; 0x784 <__fp_splitA+0x30>
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	99 1f       	adc	r25, r25
 77c:	f1 cf       	rjmp	.-30     	; 0x760 <__fp_splitA+0xc>
 77e:	86 95       	lsr	r24
 780:	71 05       	cpc	r23, r1
 782:	61 05       	cpc	r22, r1
 784:	08 94       	sec
 786:	08 95       	ret

00000788 <__fp_zero>:
 788:	e8 94       	clt

0000078a <__fp_szero>:
 78a:	bb 27       	eor	r27, r27
 78c:	66 27       	eor	r22, r22
 78e:	77 27       	eor	r23, r23
 790:	cb 01       	movw	r24, r22
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <__mulsf3>:
 796:	0e 94 de 03 	call	0x7bc	; 0x7bc <__mulsf3x>
 79a:	0c 94 91 03 	jmp	0x722	; 0x722 <__fp_round>
 79e:	0e 94 83 03 	call	0x706	; 0x706 <__fp_pscA>
 7a2:	38 f0       	brcs	.+14     	; 0x7b2 <__mulsf3+0x1c>
 7a4:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscB>
 7a8:	20 f0       	brcs	.+8      	; 0x7b2 <__mulsf3+0x1c>
 7aa:	95 23       	and	r25, r21
 7ac:	11 f0       	breq	.+4      	; 0x7b2 <__mulsf3+0x1c>
 7ae:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 7b2:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_nan>
 7b6:	11 24       	eor	r1, r1
 7b8:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>

000007bc <__mulsf3x>:
 7bc:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_split3>
 7c0:	70 f3       	brcs	.-36     	; 0x79e <__mulsf3+0x8>

000007c2 <__mulsf3_pse>:
 7c2:	95 9f       	mul	r25, r21
 7c4:	c1 f3       	breq	.-16     	; 0x7b6 <__mulsf3+0x20>
 7c6:	95 0f       	add	r25, r21
 7c8:	50 e0       	ldi	r21, 0x00	; 0
 7ca:	55 1f       	adc	r21, r21
 7cc:	62 9f       	mul	r22, r18
 7ce:	f0 01       	movw	r30, r0
 7d0:	72 9f       	mul	r23, r18
 7d2:	bb 27       	eor	r27, r27
 7d4:	f0 0d       	add	r31, r0
 7d6:	b1 1d       	adc	r27, r1
 7d8:	63 9f       	mul	r22, r19
 7da:	aa 27       	eor	r26, r26
 7dc:	f0 0d       	add	r31, r0
 7de:	b1 1d       	adc	r27, r1
 7e0:	aa 1f       	adc	r26, r26
 7e2:	64 9f       	mul	r22, r20
 7e4:	66 27       	eor	r22, r22
 7e6:	b0 0d       	add	r27, r0
 7e8:	a1 1d       	adc	r26, r1
 7ea:	66 1f       	adc	r22, r22
 7ec:	82 9f       	mul	r24, r18
 7ee:	22 27       	eor	r18, r18
 7f0:	b0 0d       	add	r27, r0
 7f2:	a1 1d       	adc	r26, r1
 7f4:	62 1f       	adc	r22, r18
 7f6:	73 9f       	mul	r23, r19
 7f8:	b0 0d       	add	r27, r0
 7fa:	a1 1d       	adc	r26, r1
 7fc:	62 1f       	adc	r22, r18
 7fe:	83 9f       	mul	r24, r19
 800:	a0 0d       	add	r26, r0
 802:	61 1d       	adc	r22, r1
 804:	22 1f       	adc	r18, r18
 806:	74 9f       	mul	r23, r20
 808:	33 27       	eor	r19, r19
 80a:	a0 0d       	add	r26, r0
 80c:	61 1d       	adc	r22, r1
 80e:	23 1f       	adc	r18, r19
 810:	84 9f       	mul	r24, r20
 812:	60 0d       	add	r22, r0
 814:	21 1d       	adc	r18, r1
 816:	82 2f       	mov	r24, r18
 818:	76 2f       	mov	r23, r22
 81a:	6a 2f       	mov	r22, r26
 81c:	11 24       	eor	r1, r1
 81e:	9f 57       	subi	r25, 0x7F	; 127
 820:	50 40       	sbci	r21, 0x00	; 0
 822:	9a f0       	brmi	.+38     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 824:	f1 f0       	breq	.+60     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 826:	88 23       	and	r24, r24
 828:	4a f0       	brmi	.+18     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 82a:	ee 0f       	add	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	bb 1f       	adc	r27, r27
 830:	66 1f       	adc	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	91 50       	subi	r25, 0x01	; 1
 838:	50 40       	sbci	r21, 0x00	; 0
 83a:	a9 f7       	brne	.-22     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 83c:	9e 3f       	cpi	r25, 0xFE	; 254
 83e:	51 05       	cpc	r21, r1
 840:	80 f0       	brcs	.+32     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 842:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_inf>
 846:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_szero>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	e4 f3       	brlt	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	98 3e       	cpi	r25, 0xE8	; 232
 850:	d4 f3       	brlt	.-12     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 852:	86 95       	lsr	r24
 854:	77 95       	ror	r23
 856:	67 95       	ror	r22
 858:	b7 95       	ror	r27
 85a:	f7 95       	ror	r31
 85c:	e7 95       	ror	r30
 85e:	9f 5f       	subi	r25, 0xFF	; 255
 860:	c1 f7       	brne	.-16     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 862:	fe 2b       	or	r31, r30
 864:	88 0f       	add	r24, r24
 866:	91 1d       	adc	r25, r1
 868:	96 95       	lsr	r25
 86a:	87 95       	ror	r24
 86c:	97 f9       	bld	r25, 7
 86e:	08 95       	ret

00000870 <_exit>:
 870:	f8 94       	cli

00000872 <__stop_program>:
 872:	ff cf       	rjmp	.-2      	; 0x872 <__stop_program>
